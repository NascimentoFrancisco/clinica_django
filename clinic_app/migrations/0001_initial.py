# Generated by Django 4.2.3 on 2023-07-21 16:36

import clinic_app.models.medical_schedule
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'Usuário já cadastrado!'}, help_text='Um nome curto para a sua identificação exclusiva no sistema.', max_length=30, unique=True, verbose_name='Usuário')),
                ('name', models.CharField(max_length=255, verbose_name='Nome')),
                ('email', models.EmailField(error_messages={'unique': 'E-mail já cadastrado!'}, help_text='Para envio de notificações se caso necessário.', max_length=254, unique=True, verbose_name='E-mail')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Equipe')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AvailableTimes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_start', models.TimeField(verbose_name='Horaário de início')),
                ('time_end', models.TimeField(verbose_name='Horaário de finalização')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome')),
                ('medical_cpf', models.CharField(error_messages={'unique': 'Este CPF já está cadastrado no sistema.'}, help_text='CPF do médico sem pontos e traços', max_length=11, unique=True, verbose_name='CPF')),
                ('medical_crm', models.CharField(error_messages={'unique': 'Este CRM já está cadastrado no sistema.'}, help_text='CRM do médico sem pontos e traços', max_length=6, unique=True, verbose_name='CRM')),
                ('phone', models.CharField(help_text='Telefone nesse formato 88900000000 sem espaços e traços, com o DD', max_length=11, verbose_name='Telefone')),
                ('email', models.EmailField(error_messages={'unique': 'E-mail já cadastrado!'}, help_text='Para envio de notificações se caso necessário.', max_length=254, unique=True, verbose_name='E-mail')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_schedule', models.DateField(help_text='Data para essa agenda', validators=[clinic_app.models.medical_schedule.validate_future_date], verbose_name='Data')),
                ('status', models.BooleanField(default=True, help_text='Se a agenda está disponível para pacientes', verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('available_times', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic_app.availabletimes', verbose_name='Horário')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic_app.doctor')),
            ],
            options={
                'unique_together': {('available_times', 'date_schedule')},
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_cpf', models.CharField(error_messages={'unique': 'Este CPF já está cadastrado no sistema.'}, help_text='CPF do paciente sem pontos e traços', max_length=11, unique=True, verbose_name='CPF')),
                ('phone', models.CharField(help_text='Telefone nesse formato 88900000000 sem espaços e traços, com o DD', max_length=11, verbose_name='Telefone')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
        ),
        migrations.CreateModel(
            name='Specialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Especialidade')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='doctor',
            name='specialty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic_app.specialty', verbose_name='Especialidade'),
        ),
        migrations.CreateModel(
            name='PatientConsultation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor_schedule', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='clinic_app.medicalschedule')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic_app.patient')),
            ],
            options={
                'unique_together': {('doctor_schedule', 'patient')},
            },
        ),
    ]
